buildscript {
    repositories {
        jcenter()
        maven {
            name = "DimDev"
            url = "https://www.dimdev.org/maven/"
        }

        maven {
            name = "Sponge"
            url = "https://repo.spongepowered.org/maven"
        }

        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }

        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'org.dimdev:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.1.0'
    id 'maven-publish'
    id 'java'
}

//apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'net.minecraftforge.gradle.tweaker-client'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'

apply from: 'https://gist.githubusercontent.com/UpcraftLP/0a98a7dfe913bd3e99073efa7ad0353b/raw/mod_script.gradle'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

def username = "${modid}"
if (project.hasProperty('dev_mail')) {
    username = "${dev_mail}"
}
else if(project.hasProperty('dev_username')) {
    username = "${dev_username}"
}

def artifactID = project.hasProperty('maven-artifact') ? findProperty('maven_artifact') : project.archivesBaseName
def buildTimeStamp = new Date().getTime()

def buildVersion = project.mod_version + ext.buildName
version = "${project.mc_version}-${buildVersion}"
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = project.modid

sourceCompatibility = targetCompatibility = project.jvm_version // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = project.jvm_version
}

compileJava {
    options.encoding = 'UTF-8'
}

tasks.build.doLast {
    println("Current version is ${artifactID}-${project.version}")
    println("Changelog:")
    println(project.ext.changeLog)
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()

    maven {
        name = "DimDev"
        url = "https://www.dimdev.org/maven/"
    }

    maven {
        //fallback for almost everything, this is CurseForge :P
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
    maven {
        //get dependencies from github
        name = "JitPack"
        url = "https://jitpack.io"
    }

}

mixin {
    defaultObfuscationEnv notch
    add sourceSets.main, "mixins.${modid}.refmap.json"
}

minecraft {
    version = "${project.mc_version}"

    //tweakClass = 'org.dimdev.riftloader.launch.RiftLoaderTweaker' //pre-1.0.3
    tweakClass = 'org.dimdev.riftloader.launch.RiftLoaderClientTweaker'

    if(project.hasProperty('runDir')) {
        runDir = project.runDir
    }
    else if(file('../run').exists()) {
		runDir = "../run"
	}
	else
	{
		runDir = "run"
	}
    
    mappings = project.mc_mappings
    if("${mappings}" != "${project.ext.mappings}" && "${mappings}".startsWith("snapshot_")) {
        println(String.format("You are on old mappings, latest mappings are %s (you are on %s)", project.ext.mappings, mappings))
    }
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	replace "@VERSION@", project.mod_version
    def fingerPrintKey = project.hasProperty('public_key') ? findProperty('public_key').replace(":", "").toLowerCase(Locale.ROOT) : "undefined"
    replace "@FINGERPRINTKEY@", fingerPrintKey
    replace "@UPDATE_JSON@", project.update_json
    replaceIn "${project.reference_class}".replace(".", "/") + ".java"
    replaceIn "pack.mcmeta"

    //auto-configure the run arguments
    if(project.hasProperty('dev_uuid')) {
        clientRunArgs += "--uuid=${dev_uuid}"
    }
    else {
        clientRunArgs += "--username=${username}"
        if(project.hasProperty('dev_password')) clientRunArgs += "--password=${dev_password}"
    }

    //skip the screen to confirm that you want to load a world with missing registry entries
    //serverJvmArgs += "-Dfml.doNotBackup=true"
    //clientJvmArgs += "-Dfml.doNotBackup=true"

    // skip having to confirm on server
    //serverJvmArgs += "-Dfml.queryResult=confirm"

    // disable server gui
    serverRunArgs += "nogui"

    //skip jansi warnings in the log
    serverJvmArgs += '-Dlog4j.skipJansi=true'
    clientJvmArgs += '-Dlog4j.skipJansi=true'
}

jar {
    from "LICENSE"
    manifest.mainAttributes(
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Maven-Artifact":"${project.group}:${artifactID}:${project.version}",
            "Timestamp": buildTimeStamp,
            "Built-On": project.mc_version,
            "Built-On-Rift": project.rift_version
    )
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    from ("LICENSE") {
        include "*"
    }
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + '-javadoc',
            "Implementation-Version": project.version,
            "Maven-Artifact":"${project.group}:${artifactID}:${project.version}:javadoc",
            "Timestamp": buildTimeStamp,
            "Built-On": project.mc_version,
            "Built-On-Rift": project.rift_version
    )
    classifier = 'javadoc'
}

sourceJar {
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + '-sources',
            "Implementation-Version": project.version,
            "Maven-Artifact":"${project.group}:${artifactID}:${project.version}:sources",
            "Timestamp": buildTimeStamp,
            "Built-On": project.mc_version,
            "Built-On-Rift": project.rift_version
    )
}

task deobfJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + '-deobf',
            "Implementation-Version": project.version,
            "Maven-Artifact":"${project.group}:${artifactID}:${project.version}:deobf",
            "Timestamp": buildTimeStamp,
            "Built-On": project.mc_version,
            "Built-On-Rift": project.rift_version
    )
    classifier = 'deobf'
}

//sign Jar
task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

task signDeobfJar(type: SignJar, dependsOn: deobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = deobfJar.archivePath
    outputFile = deobfJar.archivePath
}

task signJavadocJar(type: SignJar, dependsOn: javadocJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = javadocJar.archivePath
    outputFile = javadocJar.archivePath
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        compileJava {
            options.encoding = 'UTF-8'
        }
    }
} else {
    throw new IllegalArgumentException("wrong java version")
}

dependencies {
    implementation "org.dimdev:rift:${rift_version}:dev"

    //annotation magic ftw
    compileOnly "com.github.InsomniaKitten:Pylon:${pylon_version}"
    annotationProcessor "com.github.InsomniaKitten:Pylon:${pylon_version}"
}
if(project.hasProperty("api_package")) tasks.build.dependsOn signApiJar
tasks.build.dependsOn signJar, signDeobfJar, signJavadocJar
tasks.curseforge.mustRunAfter signJar, signDeobfJar, signJavadocJar
tasks.curseforge.dependsOn build

artifacts {
    //archives apiJar
    archives sourceJar
    archives javadocJar
    archives deobfJar
}

def curseRelations = {
    //requiredDependency '' //add curseforge-slug here
    requiredDependency 'rift'
}


curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    if(project.hasProperty('curse_id')) {
        project {
            id = project.curse_id
            changelogType = 'markdown'
            changelog = "${project.ext.changeLog}"
            releaseType = project.release_type

            relations curseRelations

            addArtifact javadocJar
            addArtifact sourceJar
            addArtifact deobfJar
            //addArtifact apiJar

            //cursegradle will automatically determine the current version
            addGameVersion '1.13'

            mainArtifact(jar) {
                displayName = "[Rift] ${project.mod_name} v${project.mod_version} MC${project.mc_version}"
            }
        }
    }
}